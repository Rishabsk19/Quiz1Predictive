# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNbNawhLJ854o24sgGP0XbkXexlSRzHc
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
import xgboost as xgb
from sklearn.metrics import accuracy_score

data  = pd.read_csv("/content/drive/MyDrive/DSAI-LVA-DATASET for Quiz.csv")
df = pd.DataFrame(data)
df

def passfunction(val):
  if val >=70:
    return "pass with high scores"
  elif(val<=70 and val>=40):
    return "pass with avg scores"
  else:
    return "failed"
df["Pass"]= df["PreviousTestScore"].apply(passfunction)

def parentseducation(val1,val2):
  if (val1 > 7 and val2 =="College"):
    return "Masters"
  elif (val1 < 7 and val2 =="College"):
     return "Undergraduate"
  elif (val2=="HighSchool"):
    return "HighSchool"
  else:
    return "Uneducated"
df["ParentEducation"] = df.apply(lambda r:parentseducation(r["StudyTime"],r["ParentEducation"]),axis=1)
df.to_csv("updated.csv")

df = pd.read_csv('/content/updated.csv')


split_ratio = 0.8


split_index = int(len(df) * split_ratio)


df_train = df.iloc[:split_index]
df_test = df.iloc[split_index:]


df_train.to_csv('train_data.csv', index=False)
df_test.to_csv('test_data.csv', index=False)

ndf = pd.read_csv("/content/train_data.csv")
ndf

encode  = LabelEncoder()
ndf["Pass"] = encode.fit_transform(ndf["Pass"])
ndf["ParentEducation"] = encode.fit_transform(ndf["ParentEducation"])
ndf

model1  = RandomForestClassifier()
model2 = DecisionTreeClassifier()
model3 = xgb.XGBClassifier()

x= ndf.drop(["Pass"],axis=1)
y=ndf["Pass"]

model1.fit(x,y)
model2.fit(x,y)
model3.fit(x,y)

test = pd.read_csv("/content/test_data.csv")
tdf = pd.DataFrame(test)

encode  = LabelEncoder()
tdf["Pass"] = encode.fit_transform(tdf["Pass"])
tdf["ParentEducation"] = encode.fit_transform(tdf["ParentEducation"])

testx = tdf.drop(["Pass"],axis=1)
testy = tdf["Pass"]

op1  = model1.predict(testx)
op2  = model2.predict(testx)
op3  = model3.predict(testx)
acc1  = accuracy_score(testy,op1)
acc2  = accuracy_score(testy,op2)
acc3  = accuracy_score(testy,op3)
print(acc1)
print(acc2)
print(acc3)

import matplotlib.pyplot as plt
import seaborn as sns
sns.barplot([acc1,acc2,acc3])
plt.ylabel('Accuracy')
plt.xlabel(['RF','DT','XGB'])
plt.show()